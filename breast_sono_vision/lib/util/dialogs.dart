import 'package:breast_sono_vision/core/color_palette.dart';
import 'package:breast_sono_vision/widget/info_card.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

Future<void> showDisclaimerDialog({
  required BuildContext context,
  required void Function()? onPressed,
}) async {
  final alertDialog = AlertDialog(
    backgroundColor: Colors.transparent,
    contentPadding: EdgeInsets.zero,
    content: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        InfoCard(
          icon: 'üö®',
          title: 'Disclaimer',
          description: const [
            TextSpan(text: 'This result is generated by an AI model and is '),
            TextSpan(
              text: 'not a medical diagnosis',
              style: TextStyle(
                fontWeight: FontWeight.bold,
              ),
            ),
            TextSpan(
                text:
                    '.\n\nPlease consult a healthcare professional for a full evaluation and proper medical advice.'),
          ],
          bottomWidgets: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const SizedBox(height: 10),
              Align(
                alignment: Alignment.centerRight,
                child: OutlinedButton(
                  style: OutlinedButton.styleFrom(
                    foregroundColor: ColorPalette.secondary,
                    side: const BorderSide(
                      color: ColorPalette.secondary,
                      width: 2,
                    ),
                  ),
                  onPressed: onPressed,
                  child: const Text(
                    'Understood',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    ),
  );

  await showGeneralDialog(
    context: context,
    barrierDismissible: false,
    barrierColor: Colors.black.withOpacity(0.35),
    transitionDuration: const Duration(milliseconds: 350),
    pageBuilder: (context, animation, secondaryAnimation) => Container(),
    transitionBuilder: (context, animation, secondaryAnimation, child) =>
        ScaleTransition(
      scale: Tween<double>(
        begin: 0.5,
        end: 1.0,
      ).animate(CurvedAnimation(
        parent: animation,
        curve: Curves.easeOutBack,
      )),
      child: FadeTransition(
        opacity: Tween<double>(
          begin: 0.0,
          end: 1.0,
        ).animate(CurvedAnimation(
          parent: animation,
          curve: Curves.easeIn,
        )),
        child: alertDialog,
      ),
    ),
  );
}

Future<void> showPermissionDialog({
  required BuildContext context,
  required void Function()? onPressed,
}) async {
  final alertDialog = AlertDialog(
    backgroundColor: Colors.transparent,
    contentPadding: EdgeInsets.zero,
    content: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        InfoCard(
          icon: '‚öôÔ∏è',
          title: 'Permissions Required',
          description: const [
            TextSpan(
                text:
                    'The permissions are not granted. Please visit the settings.'),
          ],
          bottomWidgets: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const SizedBox(height: 10),
              Align(
                alignment: Alignment.centerRight,
                child: OutlinedButton(
                  style: OutlinedButton.styleFrom(
                    foregroundColor: ColorPalette.secondary,
                    side: const BorderSide(
                      color: ColorPalette.secondary,
                      width: 2,
                    ),
                  ),
                  onPressed: onPressed,
                  child: const Text(
                    'Open Settings',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    ),
  );

  await showGeneralDialog(
    context: context,
    barrierDismissible: true,
    barrierLabel: '',
    barrierColor: Colors.black.withOpacity(0.35),
    transitionDuration: const Duration(milliseconds: 350),
    pageBuilder: (context, animation, secondaryAnimation) => Container(),
    transitionBuilder: (context, animation, secondaryAnimation, child) =>
        ScaleTransition(
      scale: Tween<double>(
        begin: 0.5,
        end: 1.0,
      ).animate(CurvedAnimation(
        parent: animation,
        curve: Curves.easeOutBack,
      )),
      child: FadeTransition(
        opacity: Tween<double>(
          begin: 0.0,
          end: 1.0,
        ).animate(CurvedAnimation(
          parent: animation,
          curve: Curves.easeIn,
        )),
        child: alertDialog,
      ),
    ),
  );
}

Future<void> showSnackbar({
  required String title,
  required String description,
  int durationSeconds = 3,
}) async {
  final duration = Duration(seconds: durationSeconds);
  // Show the snackbar
  Get.snackbar(
    '',
    '',
    titleText: Text(
      title,
      style: const TextStyle(
        color: ColorPalette.onBackground,
        fontSize: 20,
        fontWeight: FontWeight.bold,
      ),
    ),
    messageText: Text(
      description,
      style: const TextStyle(color: ColorPalette.onBackground, fontSize: 16),
    ),
    backgroundColor: ColorPalette.background.withOpacity(0.75),
    borderColor: ColorPalette.border.withOpacity(0.75),
    borderRadius: 15,
    borderWidth: 3,
    icon: const Padding(
      padding: EdgeInsets.symmetric(horizontal: 10),
      child: Text('‚ùóÔ∏è', style: TextStyle(fontSize: 24)),
    ),
    snackPosition: SnackPosition.BOTTOM,
    duration: duration,
  );
  // Wait for the snackbar to finish showing
  await Future.delayed(duration);
}
